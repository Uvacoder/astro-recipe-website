---
export async function createCollection() {
  const allRecipes = Astro.fetchContent('./recipe/*.md');
  const filterKeys = ['meal_type', 'course', 'diet', 'main_ingredient'];
  const filters = [...new Set(allRecipes.reduce((curr, recipe) => {
    filterKeys.forEach((key) => {
      if(!recipe[key]) return;
      curr.push(recipe[key]);
    });
    return curr;
  }, []))];

  const slugify = url => ( url.toLowerCase().replace(/[^a-z0-9 -]/g, '').replace(/\s+/g, '-') );

  return {
    paginate: true,
    route: '/recipes/:slug/:page?',
    paths() {
      return filters.map(filter => (
        {params: {slug: slugify(filter), filter: filter}}
      ));
    },
    async props({params, paginate}) {
      return {
        filter: params.filter,
        slug: params.slug,
        recipes: paginate(allRecipes.filter((recipe) => (
          filterKeys.some(key => (
            recipe[key] === params.filter
          ))
        )), {pageSize: 5}),
      };
    },
  };
}

const {filter, slug, recipes} = Astro.props;
---
<html lang="en">
  <head>
    <title>Pagination Example</title>
  </head>
  <body>
    <h1>All {filter} Recipes</h1>
    {recipes.data.map((recipe) => (
        <a href={recipe.url}>
            <h1>{recipe.title}</h1>
        </a>
    ))}
     <footer>
      <h4>Page {recipes.page.current} / {recipes.page.last}</h4>
      <nav class="nav">
        <a class="prev" href={recipes.url.prev || '#'}>Prev</a>
         | 
        <a class="next" href={recipes.url.next || '#'}>Next</a>
      </nav>
    </footer>
  </body>
</html>